#!/bin/bash
#
#
# author stefano fattore
#
# version BETA 0.4.3

FULL="NO"
DEPENDECIES="NO"
USERDATA="NO"
HELP="NO"
COUNT=0

# ARGS parser
for i in "$@"; do
  COUNT=$((COUNT+1))
  case $i in
    -i|--initall)
      FULL="YES"
      USERDATA="NO"
      DEPENDECIES="NO"
      shift 
      ;;
    -d|--deps)
      if [ $FULL == "YES" ]; then
        echo "[ERR] => cannot combine -i|--initall with $i"
        exit -1
      fi
      DEPENDECIES="YES"
      shift 
      ;;
    -u|--userdata)
      if [ $FULL == "YES" ]; then
        echo "[ERR] => cannot combine -i|--initall with $i"
        exit -1
      fi
      USERDATA="YES"
      shift 
      ;;
    -h|--help)
      HELP="YES"
      shift 
      ;;
    -*|--*)
      echo "Unknown option $i"
      echo "Please run ./config --help"
      exit 1
      ;;
    *)
      ;;
  esac
done
# ARGS parser end

signature(){
cat << "EOF"
           configure process for          
                _                  _  _   
               | |                (_)| |  
   __ _  _   _ | |_   ___    __ _  _ | |_ 
  / _` || | | || __| / _ \  / _` || || __|
 | (_| || |_| || |_ | (_) || (_| || || |_ 
  \__,_| \__,_| \__| \___/  \__, ||_| \__|
                             __/ |        
                            |___/   
            
EOF
}

if [ $HELP == "YES" ]; then
    echo "config [options]"
    echo "  -i|--initall"
    echo "      set username and password, check for dep and install them"
    echo
    echo "  -u|--userdata"
    echo "      set username and password"
    echo
    echo "  -d|--deps"
    echo "      check for dep and install them"
    echo
    echo "  -h|--help"
    echo "      check for dep and install them"
    echo
    exit 0
fi

# ARGS check
if [ $COUNT -eq 0 ]; then
    echo "[ERR] => No args detected, use --help for tips"
    exit -1
elif [ $COUNT -gt 0 ]; then 
    signature
fi
# ARGS check end

i=$(who | awk '{print $1}' | head -n 1)
basedir="/home/$i/.autogit"


# DIRS & FILES checking/gen
if [[ ! -d $basedir ]]
then
    echo "Created ${basedir} folder.."
    mkdir ${basedir}
fi

if [[ ! -f "${basedir}/cache" ]]
then
    echo "Created ${basedir}/cache file.."
    touch ${basedir}/cache
fi

if [[ ! -d "${basedir}/conf" ]]
then
    echo "Created ${basedir}/conf folder.."
    mkdir ${basedir}/conf
fi
# DIRS & FILES checking/gen end


user_data(){
    echo
    echo "==============================================="
    echo "          Set up your git credentials"
    echo "==============================================="
    echo    

    if [[ -f "${basedir}/conf/encr" ]]
    then
        rm -f ${basedir}/conf/encr
    fi

    if [[ -f "${basedir}/supersecrets" ]]
    then
        rm -f ${basedir}/supersecrets
    fi

    echo "Created ${basedir}/conf file.."
    touch ${basedir}/conf/encr

    echo "Created ${basedir}/supersecrets file.."
    touch ${basedir}/supersecrets

    head -c 256 /dev/random | base64 > ${basedir}/conf/encr  # gen rand pass
    chmod 0400 ${basedir}/conf/encr                          # set minimal privs

    echo "> Set username: "
    read uname

    echo "> Set password/token: (no-echo)"
    read -s passwd

    echo $uname | openssl aes-256-cbc -a -pbkdf2 -salt -pass file:${basedir}/conf/encr > ${basedir}/supersecrets
    echo "-?-" >> ${basedir}/supersecrets
    echo $passwd | openssl aes-256-cbc -a -pbkdf2 -salt -pass file:${basedir}/conf/encr >> ${basedir}/supersecrets

    chmod 0400 ${basedir}/supersecrets                       # set minimal privs
}


dependencies(){
    echo
    echo "==============================================="
    echo "           Checking dependencies"
    echo "==============================================="
    echo

    PACKAGE=""
    REQUIRED_PKG=()

    if ! type "expect" &> /dev/null; then
        REQUIRED_PKG+=("expect")
    fi
    if ! type "openssl" &> /dev/null; then
        REQUIRED_PKG+=("openssl")
    fi
    if ! type "git" &> /dev/null; then
        REQUIRED_PKG+=("git")
    fi

    if [ ${#REQUIRED_PKG[@]} -eq 0 ]; then
        echo "==============================================="
        echo "       All dependencies are satisfied"
        echo "==============================================="
        echo
    else
        PACKAGE=$(printf " %s" "${REQUIRED_PKG[@]}")
        PACKAGE=${PACKAGE:1}

        echo "==============================================="
        echo "           Installing dependencies"
        echo "==============================================="
        echo
        echo "Installing packages $PACKAGE on $(( lsb_release -ds || cat /etc/*release || uname -om ) 2>/dev/null | head -n1)"
        echo "Press [y/n] to proceed"
        read response

        if [ $response == "y" ] || [ $response == "Y" ]; then 
            if [ -x "$(command -v apt)" ]; then 
                sudo apt update
                sudo apt install $PACKAGE openssh-client
            elif [ -x "$(command -v pacman)" ]; then 
                sudo pacman -S $PACKAGE
            elif [ -x "$(command -v dnf)" ]; then
                sudo dnf install $PACKAGE
            elif [ -x "$(command -v yum)" ]; then
                sudo yum update
                sudo yum install $PACKAGE
            elif [ -x "$(command -v xbps)" ]; then
                sudo xbps-install -Su $PACKAGE
            else 
                echo "OS NOT DETECTED, couldn't install package $PACKAGE"
                exit 1;
            fi

            echo
            echo "==============================================="
            echo "Package $PACKAGE installed successfully"
            echo "==============================================="
        else
            echo "Dependencies installation aborted, quitting"
        fi
    fi
}

if [ $USERDATA == "YES" ]; then
    user_data
    echo "done"

fi

if [ $DEPENDECIES == "YES" ]; then
    dependencies

    echo "done"
fi

if [ $FULL == "YES" ]; then
    user_data
    
    dependencies

    echo "done"
fi


