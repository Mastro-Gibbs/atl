#!/usr/bin/expect
#
#
# author stefano fattore
#
# version BETA 0.1.4


set basecmd [lindex $argv]
set cmd [lindex $argv 0]

if { $cmd == "--help" || $cmd == "-h" } {
    puts "==============================================="
    puts "
                _                  _  _   
               | |                (_)| |  
   __ _  _   _ | |_   ___    __ _  _ | |_ 
  / _` || | | || __| / _ \\  / _` || || __|
 | (_| || |_| || |_ | (_) || (_| || || |_ 
  \\__,_| \\__,_| \\__| \\___/  \\__, ||_| \\__|
                             __/ |        
                            |___/         "
    puts ""
    puts "=============================================="
    puts ""
    puts "autogit: for lazy linux developers"
    puts ""
    puts "syntax: autogit \[command\] \[options\]"
    puts ""
    puts "commands supported:"
    puts "  push | pull | clone"
    exit 0
}

if { $cmd == "--version" || $cmd == "-v" } {
    puts "==============================================="
    puts "
                _                  _  _   
               | |                (_)| |  
   __ _  _   _ | |_   ___    __ _  _ | |_ 
  / _` || | | || __| / _ \\  / _` || || __|
 | (_| || |_| || |_ | (_) || (_| || || |_ 
  \\__,_| \\__,_| \\__| \\___/  \\__, ||_| \\__|
                             __/ |        
                            |___/         "
    puts ""
    puts "=============================================="
    puts ""
    puts "Version: 0.1.3 \[BETA\]"
    puts "Developed by Stefano Fattore aka MastroGibbs"
    puts ""
    exit 0
}

set i [exec whoami]
set conffile /home/$i/.autogit/supersecrets

if {![file exists $conffile]} {
    puts "configuration not found! please run autogitconfigure!"
    exit -1
}

if { $cmd == "" } {
    puts "\[ERR\] => args required, aborting.."
    puts "run with option --help for tips"
    exit -1
}

set USERNAME [exec head -n 1 $conffile | openssl aes-256-cbc -d -a -pbkdf2 -salt -pass pass:some]
set TOKEN [exec tail -n 2 $conffile | openssl aes-256-cbc -d -a -pbkdf2 -salt -pass pass:some]

if { $cmd == "push" || $cmd == "pull" } {
    spawn git $cmd $basecmd
    expect {
        timeout { send_user "\nno auth required\n"; puts "\[SUC\] => $cmd done, quitting.."; exit 1 }
        eof { send_user "\nno auth required\n"; puts "\[SUC\] => $cmd done, quitting.."; exit 1 }
        "Username for 'https://github.com':"
    }
    send "$USERNAME\r"
    expect {
        timeout { send_user "\nNo password needed\n"; exit 1 }
        eof { send_user "\nNo password needed\n"; exit 1 }
        "Password for 'https://$USERNAME@github.com':"
    }
    send "$TOKEN\r"
    interact

    puts "\[SUC\] => $cmd done, quitting.."
    exit 0
}

if { $cmd == "clone" } {
    set link [lindex $argv 1]

    if { $link == "" } {
        puts "\[ERR\] => link required with $cmd command, aborting.."
        exit -1
    }

    spawn git $cmd $link
    expect {
        timeout { send_user "\nno auth required\n"; puts "\[SUC\] => $cmd done, quitting.."; exit 1 }
        eof { send_user "\nno auth required\n"; puts "\[SUC\] => $cmd done, quitting.."; exit 1 }
        "Username for 'https://github.com':"
    }
    send "$USERNAME\r"
    expect {
        timeout { send_user "\nno auth required\n"; exit 1 }
        eof { send_user "\nno auth required\n"; exit 1 }
        "Password for 'https://$USERNAME@github.com':"
    }
    send "$TOKEN\r"
    interact

    puts "\[SUC\] => $cmd done, quitting.."
    exit 0
}

echo "For this $cmd use git"
exit 0
