#!/bin/bash
#
#
# author stefano fattore
#
# version BETA 0.3.2


DEPENDECIES=0
GITDATA=0
SSHDATA=0
SSHSTORE=0
SSHCFG=""
SILENT=0
COUNT=0

function valid_ip()
{
    local  IPA1=$1
    local  stat=0

    if [[ $IPA1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]];
    then
        OIFS=$IFS
        IFS='.'
        ip=($IPA1)
        IFS=$OIFS

        if [[ ${ip[0]} -le 255 ]] && [[ ${ip[1]} -le 255 ]] && [[ ${ip[2]} -le 255 ]] && [[ ${ip[3]} -le 255 ]];
        then
            stat=1
        fi
    fi
    return $stat
}


helper(){
    echo "config [option]"
    echo
    echo "  -g|--github"
    echo "      set username and password"
    echo
    echo "  -s|--ssh"
    echo "      set username and password"
    echo
    echo "  -d|--deps"
    echo "      check for dep and install them"
    echo
    echo "  --silent"
    echo "      no echos"
    echo
    echo "  -h|--help"
    echo "      print user friendly helper"
    echo
    exit 0
}

# ARGS parser
for i in "$@"; do
  COUNT=$((COUNT+1))
  case $i in
    -d|--deps)
        DEPENDECIES=1
        shift 
        ;;
    -g|--github)
        GITDATA=1
        shift 
        ;;
    -s|--ssh)
        SSHDATA=1
        shift 
        ;;
    -sd=*|--ssh-data=*)
        SSHSTORE=1
        SSHCFG="${i#*=}%20"
        arr=()
        while [[ $SSHCFG ]]; do
            arr+=( "${SSHCFG%%"%20"*}" )
            SSHCFG=${SSHCFG#*"%20"}
        done

        SSHCFG=("${arr[@]}")
        arr=($(echo ${SSHCFG[0]} | tr "@" "\n"))

        if [ ${#arr[@]} -lt 2 ]; then
            echo "Invalid host"
            exit -1
        fi
        valid_ip ${arr[1]}
        res=$?
        if [[ $res -eq 0 ]]
        then
            echo "Invalid ip"
            exit -1
        fi

        SSHCFG=( "${arr[0]}" "${arr[1]}" "${SSHCFG[1]}" )

        shift 
        ;;
    -sr=*|--ssh-replace=*)
        SSHCFG="${i#*=}"
        SSHDATA=1
        SILENT=1
        shift 
        ;;
    -h|--help)
        helper
        shift 
        ;;
    --silent)
        SILENT=1
        shift 
        ;;
    -*|--*)
        echo "Unknown option $i"
        echo "Please run ./config --help"
        exit 1
        ;;
    *)
        ;;
  esac
done
# ARGS parser end

# ARGS check
if [ $COUNT -eq 0 ]; then
    echo "[ERR] => No args detected, use --help for tips"
    exit -1
fi

if [ $COUNT -gt 1 ]; then
    echo "[ERR] => Too much args, use --help for tips"
    exit -1
fi
# ARGS check end

i=$(who | awk '{print $1}' | head -n 1)
basedir="/home/$i/.atl"


# DIRS & FILES checking/gen
if [[ ! -d $basedir ]]
then
    echo "Created ${basedir} folder.."
    mkdir ${basedir}
fi

if [[ ! -d $basedir/git ]]
then
    echo "Created ${basedir}/git folder.."
    mkdir ${basedir}/git
fi

if [[ ! -d $basedir/ssh ]]
then
    echo "Created ${basedir}/ssh folder.."
    mkdir ${basedir}/ssh
fi

if [[ ! -f "${basedir}/cache" ]]
then
    echo "Created ${basedir}/cache file.."
    touch ${basedir}/cache
fi
# DIRS & FILES checking/gen end


git_data(){
    if [ $SILENT -eq 0   ]; then
        echo
        echo "==============================================="
        echo "          Set up your git credentials"
        echo "==============================================="
        echo  
    fi  

    echo "> Set username: "
    read uname

    echo "> Set password/token: (silent)"
    read -s passwd

    if [[ ! -d "${basedir}/git/conf" ]]
    then
        echo "Created ${basedir}/git/conf folder.."
        mkdir ${basedir}/git/conf
    fi

    if [[ -f "${basedir}/git/conf/encr" ]]
    then
        rm -f ${basedir}/git/conf/encr
    fi

    if [[ -f "${basedir}/git/ss" ]]
    then
        rm -f ${basedir}/git/ss
    fi

    if [ $SILENT -eq 0 ]; then
        echo "Created ${basedir}/git/conf file.."
    fi
    touch ${basedir}/git/conf/encr

    if [ $SILENT -eq 0 ]; then
        echo "Created ${basedir}/ss file.."
    fi
    touch ${basedir}/git/ss

    head -c 256 /dev/random | base64 > ${basedir}/git/conf/encr  # gen rand pass
    chmod 0400 ${basedir}/git/conf/encr                          # set minimal privs

    echo $uname | openssl aes-256-cbc -a -pbkdf2 -salt -pass file:${basedir}/git/conf/encr > ${basedir}/git/ss
    echo "-?-" >> ${basedir}/git/ss
    echo $passwd | openssl aes-256-cbc -a -pbkdf2 -salt -pass file:${basedir}/git/conf/encr >> ${basedir}/git/ss

    chmod 0400 ${basedir}/git/ss                                # set minimal privs
}

ssh_data(){
    if [ $SILENT -eq 0 ]; then
        echo
        echo "==============================================="
        echo "          Set up your ssh credentials"
        echo "==============================================="
        echo  
    fi  

    echo "> Set username: "
    read uname

    echo "> Set ip:"
    read host

    valid_ip $host
    res=$?

    while [[ $res -eq 0 ]]
    do
        echo "Invalid ip"
        echo "> Set new ip:"
        read host

        valid_ip $host
        res=$?
    done

    echo "> Set password: (silent)"
    read -s passwd

    if [[ ! -d "${basedir}/ssh/${uname}@${host}" ]]
    then
        if [ $SSHCFG != "" ]; then
            if [[ -d "${basedir}/ssh/${SSHCFG}" ]]
            then
                rm -rf ${basedir}/ssh/${SSHCFG}
            fi
        fi
        echo "Created ${basedir}/ssh/${uname}@${host} folder.."
        mkdir ${basedir}/ssh/${uname}@${host}
    else
        echo "Regenerated ${basedir}/ssh/${uname}@${host} folder.."
        rm -rf ${basedir}/ssh/${uname}@${host}
        mkdir ${basedir}/ssh/${uname}@${host}
    fi

    if [[ ! -d "${basedir}/ssh/${uname}@${host}/conf" ]]
    then
        echo "Created ${basedir}/ssh/${uname}@${host}/conf folder.."
        mkdir ${basedir}/ssh/${uname}@${host}/conf
    fi

    if [ $SILENT -eq 0 ]; then
        echo "Created ${basedir}/ssh/${uname}@${host}/conf/encr file.."
    fi
    touch ${basedir}/ssh/${uname}@${host}/conf/encr

    if [ $SILENT -eq 0 ]; then
        echo "Created ${basedir}/ssh/${uname}@${host}/ss file.."
    fi
    touch ${basedir}/ssh/${uname}@${host}/ss

    head -c 256 /dev/random | base64 > ${basedir}/ssh/${uname}@${host}/conf/encr  # gen rand pass
    chmod 0400 ${basedir}/ssh/${uname}@${host}/conf/encr                          # set minimal privs

    echo $passwd | openssl aes-256-cbc -a -pbkdf2 -salt -pass file:${basedir}/ssh/${uname}@${host}/conf/encr > ${basedir}/ssh/${uname}@${host}/ss

    chmod 0400 ${basedir}/ssh/${uname}@${host}/ss                     # set minimal privs
}

ssh_store(){
    uname=${SSHCFG[0]}
    host=${SSHCFG[1]}
    passwd=${SSHCFG[2]}

    if [[ ! -d "${basedir}/ssh/${uname}@${host}" ]]
    then
        if [ $SSHCFG != "" ]; then
            if [[ -d "${basedir}/ssh/${SSHCFG}" ]]
            then
                rm -rf ${basedir}/ssh/${SSHCFG}
            fi
        fi
        echo "Created ${basedir}/ssh/${uname}@${host} folder.."
        mkdir ${basedir}/ssh/${uname}@${host}
    else
        echo "Regenerated ${basedir}/ssh/${uname}@${host} folder.."
        rm -rf ${basedir}/ssh/${uname}@${host}
        mkdir ${basedir}/ssh/${uname}@${host}
    fi

    if [[ ! -d "${basedir}/ssh/${uname}@${host}/conf" ]]
    then
        echo "Created ${basedir}/ssh/${uname}@${host}/conf folder.."
        mkdir ${basedir}/ssh/${uname}@${host}/conf
    fi

    if [ $SILENT -eq 0 ]; then
        echo "Created ${basedir}/ssh/${uname}@${host}/conf/encr file.."
    fi
    touch ${basedir}/ssh/${uname}@${host}/conf/encr

    if [ $SILENT -eq 0 ]; then
        echo "Created ${basedir}/ssh/${uname}@${host}/ss file.."
    fi
    touch ${basedir}/ssh/${uname}@${host}/ss

    head -c 256 /dev/random | base64 > ${basedir}/ssh/${uname}@${host}/conf/encr  # gen rand pass
    chmod 0400 ${basedir}/ssh/${uname}@${host}/conf/encr                          # set minimal privs

    echo $passwd | openssl aes-256-cbc -a -pbkdf2 -salt -pass file:${basedir}/ssh/${uname}@${host}/conf/encr > ${basedir}/ssh/${uname}@${host}/ss

    chmod 0400 ${basedir}/ssh/${uname}@${host}/ss                     # set minimal privs
}

dependencies(){
    echo
    echo "==============================================="
    echo "           Checking dependencies"
    echo "==============================================="

    PACKAGE=""
    REQUIRED_PKG=()

    if ! type "expect" &> /dev/null; then
        REQUIRED_PKG+=("expect")
    fi
    if ! type "openssl" &> /dev/null; then
        REQUIRED_PKG+=("openssl")
    fi
    if ! type "git" &> /dev/null; then
        REQUIRED_PKG+=("git")
    fi
    if ! type "ssh" &> /dev/null; then
        REQUIRED_PKG+=("openssh-client")
    fi

    if [ ${#REQUIRED_PKG[@]} -eq 0 ]; then
        echo "done."
        echo "==============================================="
        echo "       All dependencies are satisfied"
        echo "==============================================="
        exit 0
    else
        PACKAGE=$(printf " %s" "${REQUIRED_PKG[@]}")
        PACKAGE=${PACKAGE:1}

        echo "done."
        echo "==============================================="
        echo "           Installing dependencies"
        echo "==============================================="
        echo
        echo "Installing packages $PACKAGE on $(( lsb_release -ds || cat /etc/*release || uname -om ) 2>/dev/null | head -n1)"
        echo "Press [y/n] to proceed"
        read response

        if [ $response == "y" ] || [ $response == "Y" ]; then 
            if [ -x "$(command -v apt)" ]; then 
                sudo apt update
                sudo apt install $PACKAGE openssh-client
            elif [ -x "$(command -v pacman)" ]; then 
                sudo pacman -S $PACKAGE
            elif [ -x "$(command -v dnf)" ]; then
                sudo dnf install $PACKAGE
            elif [ -x "$(command -v yum)" ]; then
                sudo yum update
                sudo yum install $PACKAGE
            elif [ -x "$(command -v xbps)" ]; then
                sudo xbps-install -Su $PACKAGE
            else 
                echo "OS NOT DETECTED, couldn't install package $PACKAGE"
                exit 1;
            fi

            echo
            echo "==============================================="
            echo "Package $PACKAGE installed successfully"
            echo "==============================================="
        else
            echo "Dependencies installation aborted, quitting"
        fi
    fi
}

if [ $GITDATA -eq 1 ]; then
    git_data
    echo "done."

fi

if [ $SSHDATA -eq 1 ]; then
    ssh_data
    echo "done."

fi

if [ $SSHSTORE -eq 1 ]; then
    ssh_store
    echo "done."

fi

if [ $DEPENDECIES -eq 1 ]; then
    dependencies
fi



