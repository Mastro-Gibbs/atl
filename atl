#!/usr/bin/expect --
#
#
# author stefano fattore
#
# version BETA 0.2.1

set user [exec whoami]
set gitss /home/$user/.atl/git/ss
set gitpw /home/$user/.atl/git/conf/encr
set manpage /usr/share/man/man1/atl.1.gz
set confdir /home/$user/.atl
set sshdevs /home/$user/.atl/ssh
set executable /usr/local/bin/atl

set COMMAND 0
set command 0
set arguments ""

if {![file exists $confdir/cache]} {
    puts "\[\033\[91mERR\033\[00m\] => configuration not found\nrun ./config --help"
    exit -1
}

proc complete {command status} {
    if { $status } {
        puts "$command done."
    } else {
        puts "done."
    }
}

proc signature {sign} {
    set sign_length [string length $sign]
    set spaces [expr {45 - $sign_length}]
    set fsign ""

    for { set iter 0 } { $iter < $spaces } { incr iter } {
        set fsign "${fsign} "
        if { $iter == [expr {$spaces / 2}] } {
            set fsign "${fsign}${sign}"
        }
    }

    puts "\033\[95m\033\[01m===============================================\n"
    puts "$fsign"
    puts "   
            █████╗ ████████╗██╗     
           ██╔══██╗╚══██╔══╝██║     
           ███████║   ██║   ██║     
           ██╔══██║   ██║   ██║     
           ██║  ██║   ██║   ███████╗
           ╚═╝  ╚═╝   ╚═╝   ╚══════╝\n"
    puts "==============================================\033\[00m\n"
}

proc help {section} {
    set sign "$section helper for"
    signature $sign

    if { $section == "atl" } {

        puts "\033\[01m\033\[97mName:\033\[00m\n\tatl - autotool for lazy people\n"
        puts "\033\[01m\033\[97mDescription:\033\[00m\n\twrap git and ssh commands and automatize them.\n"
        puts "\033\[01m\033\[97mSynopsis:\033\[00m\n\tatl <options> | \[COMMAND\] \[command\] <options>\n"
        puts "\033\[01m\033\[97mCommands:\033\[00m\n\t\033\[97mgit \[command\] <options>\033\[00m\n\tcan run git commands, automated\n"
        puts "\t\033\[97mssh \[command\] <option>\033\[00m\n\tcan run ssh commands, automated\n"
        puts "\t\033\[97muninstall <option>\033\[00m\n\tuninstall alt, can be combined with option --purge\n\tto remove configuration folder\n"
        puts "\t\033\[97mconfig <option>\033\[00m\n\tconfig a service, must be combined with arguments like \033\[97mgit\033\[00m\n\tto set git data and \033\[97mssh\033\[00m to add a device if not exists\n\totherwise it will be replaced\n"
        puts "\033\[01m\033\[97mOptions:\033\[00m\n\t-v|--version for version\n"
        puts "\t-h|--help for helper\n"
    
    } elseif { $section == "git" } {

        puts "\033\[01m\033\[97mName:\033\[00m\n\tatl git - autotool for git\n"
        puts "\033\[01m\033\[97mDescription:\033\[00m\n\twrap git commands and automatize them.\n"
        puts "\033\[01m\033\[97mSynopsis:\033\[00m\n\t- atl git \[command\] <option>\n\t- see git/git-* synopsis\n"
        puts "\033\[01m\033\[97mCommands:\033\[00m\n\t\033\[97msaio <msg>\033\[00m\n\taka 'simple all in one', do git add ., git commit -m <msg>, git push\n"
        puts "\033\[01m\033\[97mOptions:\033\[00m\n\t-h|--help for atl git helper\n"

    } elseif { $section == "ssh" } {
    
        puts "\033\[01m\033\[97mName:\033\[00m\n\tatl ssh - autotool for ssh\n"
        puts "\033\[01m\033\[97mDescription:\033\[00m\n\twrap ssh commands and automatize them.\n"
        puts "\033\[01m\033\[97mSynopsis:\033\[00m\n\t- atl ssh \[command\] <options>\n\t- see ssh synopsis\n"
        puts "\033\[01m\033\[97mCommands:\033\[00m\n\t\033\[97madd\033\[00m\n\tadd a device to known host devices\n"
        puts "\t\033\[97mremove <option>\033\[00m\n\tremove a device from known host devices, can be combined with option --purge\n\tto remove device ssh-key\n"
        puts "\t\033\[97mmodify\033\[00m\n\tmodify a device from known host devices\n"
        puts "\t\033\[97mconnect <args|options>\033\[00m\n\tconnect to known device with ssh args and options, automated\n"
        puts "\t\033\[97mshow\033\[00m\n\tshow known host devices\n"
    
    }
    
    puts "\033\[95m\033\[01mSee man atl for more\033\[00m\ndone."

    exit 0
}

proc version {} {
    set sign "Version for"
    signature $sign

    puts "\033\[97m\033\[01mVersion:\033\[00m"
    puts "  0.2.1 \[BETA\]"
    puts ""
    puts "Developed by Stefano Fattore aka MastroGibbs"
    puts ""
    exit 0
}

proc uninstall {opt} {
    set sign "Uninstaller for"
    signature $sign

    set user [exec whoami]
    set cache /home/$user/.atl/cache

    set err_msg "\[\033\[91mERR\033\[00m\] => configuration not found\nuninstalling aborted."

    set extra_msg " "
    if { $opt != "" } {
        set extra_msg " \033\[01m\033\[97mcompletely\033\[00m "
    }
    puts "Are you sure you want${extra_msg}uninstall \033\[01m\033\[95matl\033\[00m? \[y/n\]"
    gets stdin response

    if { $response != "Y" && $response != "y" } {
        puts "Uninstalling aborted."
        exit 0
    }

    if {[file exists $cache]} {
        set ifol [exec head -n1 $cache]

        if { $ifol != "" } {
            set ifol ${ifol}bin/uninstall
            if {[file exists $ifol]} {
                spawn -noecho $ifol $opt
                interact
                exit 0
            } else {
                puts "\[\033\[91mERR\033\[00m\] => no script found\naborting."
                exit -1
            }
        } else {
            puts $err_msg
            exit -1
        }
    } else {
        puts $err_msg
        exit -1
    }
}

proc config {opt} {
    set sign "Configure process for"
    signature $sign

    set err_msg "\[\033\[91mERR\033\[00m\] => configuration not found\naborting."
    set arg 0
    set user [exec whoami]
    set confdir /home/$user/.atl

    switch -regexp -- $opt {
        {(^git$)} {
            set arg "--github"
        }
        
        {(^ssh$)} {
            set arg "--ssh"
        }

        default {
            # dummy 
            exit -1
        }
    }

    if {[file exists $confdir]} {
        set ifol [exec head -n1 /home/$user/.atl/cache]

        if { $ifol != "" } {
            set ifol ${ifol}bin/config
            if {[file exists $ifol]} {
                spawn -noecho $ifol $arg
                interact
                exit 0
            } else {
                puts "\[\033\[91mERR\033\[00m\] => no script found\naborting."
                exit -1
            }
        } else {
            puts $err_msg
            exit -1
        }
    } else {
        puts $err_msg
        exit -1
    }
}

proc parseargs {argc argv} {
    if { $argc == 0 } { 
        set section "atl"
        help $section
    }

    set COMMAND [lindex $argv 0]
    set command 0

    switch -regexp -- $COMMAND {
        {(^git$|^ssh$)} {}

        {(^\-h$|^\-\-help$)} { 
            set section "atl"
            help $section
        }

        {(^\-v$|^\-\-version$)} { version }

        {(^uninstall$)} { 
            set opt ""
            if { $argc == 2 } {
                set tmp [lindex $argv 1]
                if { $tmp == "--purge" } {
                    set opt [lindex $argv 1]
                } else {
                    puts "\[\033\[91mERR\033\[00m\] => unknown option '$tmp'\n\trun atl --help"
                    exit -1
                }
            }
            uninstall $opt
        }

        {(^config$)} {
            set opt 0

            if { $argc < 2 } { puts "\[\033\[91mERR\033\[00m\] => must specify configure option"; exit -1 }

            set tmp [lindex $argv 1]

            switch -regexp -- $tmp {
                {(^git$|^ssh$)} {
                    set opt $tmp
                }

                default {
                    puts "Unknown option '$tmp'"
                    exit -1
                }
            }

            config $opt
        }

        default {
            puts "\[\033\[91mERR\033\[00m\] => command '$COMMAND' not valid\nrun 'atl --help'"
            exit -1
        }
    }

    if { $argc == 1 } {
        help $COMMAND
    }

    for { set iter 1 } { $iter < $argc } { incr iter } {
        set curr [lindex $argv $iter]

        set err_msg "\[\033\[91mERR\033\[00m\] => unknown command '$curr' or invalid at this position\n\trun atl --help"

        switch -regexp -- $curr {
            {(^git$|^ssh$|^uninstall$)} { puts $err_msg; exit -1 }

            {(^\-h$|^\-\-help$)} { help $COMMAND }
    
            {(^\-v$|^\-\-version$)} { version }

            default { 
                if { $COMMAND == "git" } {
                    switch -regexp -- $curr {
                        {(^saio$)} {
                            if { $iter != 1 } { puts $err_msg; exit -1 }
                            if { $argc == 2 } { puts $err_msg; exit -1 }
                            set command $curr
                        }

                        default {
                            if { $iter == 1 } { set command $curr }
                        }
                    }

                } elseif { $COMMAND == "ssh" } {
                    switch -regexp -- $curr {
                        {(^connect$|^remove$|^modify$|^add$|^show$)} {
                            if { $iter != 1 } { puts $err_msg; exit -1 }
                            set command $curr

                            if { $argc == 3 && $curr == "remove"} {
                                set tmp [lindex $argv 2]
                                if { $tmp != "--purge" } {
                                    puts "\[\033\[91mERR\033\[00m\] => unknown option '$tmp'\n\trun atl ssh --help"
                                    exit -1
                                }
                            }
                        }

                        default {
                            if { $iter == 1 } { puts $err_msg; exit -1 }
                        }
                    }
                }
            }
        }
    }

    set result "$COMMAND $command"
    return $result
}

proc get_ssh_entry {opt choice} {
    set sign "ssh $opt process for"
    signature $sign
    
    set user [exec whoami]
    set sshdevs /home/$user/.atl/ssh
    set entries [exec ls $sshdevs]
    set entries_length [llength $entries]
    set formatStr {%0s%10s}
    set entry ""

    if { $entries_length == 0 } {
        puts "No devices found\n\trun 'atl ssh add' to add a device"
        exit -1
    }

    if { $choice == 1 } {
        set page ""

        puts "Choose the page and device to $opt\n"
    }
    
    set page 0
    set index 0
    for { set iter 0 } { $iter < [llength $entries] } { incr iter } {
        if { [expr {$iter % 8}] == 0 } {
            set index 0
            if { $iter > 0 } {
                puts "\033\[97m-----------------------------------------------\033\[00m"
            }
            puts "\033\[97mpage: \033\[00m\033\[95m[incr page]\033\[00m"
        }

        incr index
        set first "\033\[95m\[$index\]\033\[00m \033\[01m\033\[97m[lindex $entries $iter]\033\[00m"
        set iter [expr {$iter + 1}]

        set second ""
        incr index
        if { $iter < [llength $entries] } {
            set second "\033\[95m\[$index\]\033\[00m \033\[01m\033\[97m[lindex $entries $iter]\033\[00m"
        }

        puts "$first\t\t$second"       
    }

    if { $choice == 1 } {
        exec /bin/stty raw -echo <@stdin
        set spage [read stdin 1]
        exec /bin/stty -raw echo <@stdin
    
        set valid [string is integer $spage]
    
        puts ""
        while { ! $valid || $spage <= 0 || $spage > $page } {
            puts "\033\[91minvalid page\033\[00m"
            exec /bin/stty raw -echo <@stdin
            set spage [read stdin 1]
            exec /bin/stty -raw echo <@stdin
            set valid [string is integer $spage]
        }

        puts "Selected page: \033\[97m$spage\033\[00m"

        exec /bin/stty raw -echo <@stdin
        set sindex [read stdin 1]
        exec /bin/stty -raw echo <@stdin
    
        set valid [string is integer $sindex]

        set _page 1
        if { $spage > 1 } {
            set _page [expr {$spage - 1}]
        }
        set _page [expr {$_page * 8}]
        set availables [expr { [llength $entries] - $_page }]
        set availables [expr { [llength $entries] - $availables }]
        while { ! $valid || $sindex <= 0 || $sindex > [llength $entries] || $sindex > [expr { [llength $entries] - $availables }] } {
            puts "\033\[91minvalid index\033\[00m"
            exec /bin/stty raw -echo <@stdin
            set sindex [read stdin 1]
            exec /bin/stty -raw echo <@stdin
            set valid [string is integer $sindex]
        }

        puts "Selected index: \033\[97m$sindex\033\[00m"
    
        set spage [expr {$spage - 1}]
        set spage [expr {$spage * 8}]
        set entry [lindex $entries [expr { [expr {$spage + $sindex}] - 1}]]
    }
    
    return $entry
}

proc remove_ssh_dev {dev silent purge} {
    set user [exec whoami]
    set sshdevs /home/$user/.atl/ssh

    puts "Are you sure you want delete \033\[01m\033\[97m$dev\033\[00m's data? \[y/n\]"
    gets stdin response

    if { $response != "Y" && $response != "y" } {
        puts "Deleting aborted."
        return
    }

    if { [catch {exec rm -fr "${sshdevs}/${dev}"} fp] } {
        puts "\[\033\[91mERR\033\[00m\] => something went wrong"
        exit -1
    } else {
        if { $silent == 0 } {
            puts "\033\[01m\033\[97m$dev\033\[00m's data deleted successfully"
        }
    }

    if { $purge != "" } {
        puts "\nAre you sure you want delete stored ssh-key for \033\[01m\033\[97m$dev\033\[00m? \[y/n\]"
        gets stdin response

        if { $response == "Y" || $response == "y" } {
            lassign [split $dev "@"] uname host
            if { [catch {exec ssh-keygen -f /home/$user/.ssh/known_hosts -R $host} pf] } {
                puts "No stored ssh-key for \033\[01m\033\[97m$dev\033\[00m found"
                puts "aborting.."
            }
        }
    }
    puts "done."
}

proc mod_ssh_dev {dev} {
    set user [exec whoami]
    set sshdevs /home/$user/.atl/ssh
    set cache /home/$user/.atl/cache

    puts "Are you sure you want modify \033\[01m\033\[97m$dev\033\[00m's data? \[y/n\]"
    gets stdin response

    if { $response != "Y" && $response != "y" } {
        puts "Modification aborted."
        return
    }

    if {[file exists $cache]} {
        set ifol [exec head -n1 $cache]

        if { $ifol != "" } {
            set ifol ${ifol}bin/config
            if {[file exists $ifol]} {
                puts "\nSet new data for \033\[01m\033\[97m$dev\033\[00m"

                spawn -noecho $ifol --ssh-replace=$dev

                interact
            } else {
                puts "\[\033\[91mERR\033\[00m\] => no script found\naborting."
                exit -1
            }
        } else {
            puts $err_msg
            exit -1
        }
    } else {
        puts $err_msg
        exit -1
    }
}

proc connect_ssh {dev arguments} {
    set user [exec whoami]
    set devss /home/$user/.atl/ssh/$dev/ss
    set devencr /home/$user/.atl/ssh/$dev/conf/encr
    lassign [split $dev "@"] uname host

    set PASS [exec head -n1 $devss | openssl aes-256-cbc -d -a -pbkdf2 -salt -pass file:$devencr]

    spawn -noecho ssh {*}$arguments $dev
    expect {
        timeout { puts "Timeout reached\naborting.\n"; exit -1 }
        eof { puts "aborting."; exit -1 }
        "ssh:" { send_user "\n\[\033\[91mERR\033\[00m\] => an error was generated\naborting.\n"; exit -1 }
        "Are you sure you want to continue connecting*" {
            send_user "\nPress \[y/n\] to interact"
            exec /bin/stty raw -echo <@stdin
            set response [read stdin 1]
            exec /bin/stty -raw echo <@stdin

            if { $response == "y" } {
                send "yes\r"
            } else {
                send "no\r"
            }

            exp_continue
        }

        "Permission denied, please try again." {
            puts "\n\n\[\033\[91mERR\033\[00m\] => wrong credentials for $dev\n\trun 'atl ssh modify' and change the data for this host"
            exit -1
        }
        
        "$dev's password:" {
            send "$PASS\r"
            exp_continue
        }

        "$uname*" {}
    }

    interact

}

proc ssh_add {} {
    set user [exec whoami]
    set sshdevs /home/$user/.atl/ssh
    set cache /home/$user/.atl/cache

    if {[file exists $cache]} {
        set ifol [exec head -n1 $cache]

        if { $ifol != "" } {
            set ifol ${ifol}bin/config
            if {[file exists $ifol]} {
                spawn -noecho $ifol --ssh
                interact
                exit 0
            } else {
                puts "\[\033\[91mERR\033\[00m\] => no script found\naborting"
                exit -1
            }
        } else {
            puts $err_msg
            exit -1
        }
    } else {
        puts $err_msg
        exit -1
    }
}

# ARGS parsing area
lassign [parseargs $argc $argv] COMMAND command

if { $argc > 2 } {
    set arguments [lrange $argv 2 end]
}
# ARGS parsing area END


# CORE impl
switch -regexp -- $COMMAND {
    {(^git$)} {
        if {![file exists $gitss] && ![file exists $gitpw]} {
            puts "\[\033\[91mERR\033\[00m\] => git configuration not found\n\trun atl config git"
            exit -1
        }

        set USERNAME [exec -- sh -c "tail -f $gitss | sed \"/^-?-$/ q\" | head -n -1 | openssl aes-256-cbc -d -a -pbkdf2 -salt -pass file:$gitpw"]
        set TOKEN [exec cat $gitss | sed -n -e "/-?-/,\$p" | sed "1d" | openssl aes-256-cbc -d -a -pbkdf2 -salt -pass file:$gitpw]

        switch -regexp -- $command {
            {(^saio$)} {
                # simple all in one

                set status 0

                spawn -noecho git add .
                spawn -noecho git commit -m "$arguments"
            
                spawn -noecho git push
                expect {
                    timeout { puts "Timeout reached\naborting."; exit -1 }
                    eof { complete $command $status; exit 1 }
                    "*atal:" { send_user "\n\[\033\[91mERR\033\[00m\] => error was generated\naborting."; exit -1 }
                    "Username for 'https://github.com':" {
                        send "$USERNAME\r"
                        exp_continue
                    }
                
                    "Password for 'https://$USERNAME@github.com':" {
                        send "$TOKEN\r"
                    }
                }
            
                interact
                set status 1 
            
                complete $command $status;
            
                exit 0
            }

            default {
                # default git command 

                set status 0

                spawn -noecho git $command {*}$arguments

                expect {
                    timeout { puts "Timeout reached\naborting."; exit -1 }
                    eof { complete $command $status; exit 1 }
                    "*atal:" { send_user "\n\[\033\[91mERR\033\[00m\] => error was generated\naborting."; exit -1 }
                    "Username for 'https://github.com':" {
                        send "$USERNAME\r"
                        exp_continue
                    }
                
                    "Password for 'https://$USERNAME@github.com':" {
                        send "$TOKEN\r"
                    }
                }

                interact

                set status 1
                
                complete $command $status;
                
                exit 0
            }
        }
    }

    {(^ssh$)} {
        if {![file exists $sshdevs]} {
            puts "\[\033\[91mERR\033\[00m\] => ssh configuration not found\n\trun atl config ssh"
            exit -1
        }

        switch -regexp -- $command {
            {(^show$)} {
                set choice 0
                set sign "known hosts list"
                get_ssh_entry $sign $choice

                exit 0
            }

            {(^connect$)} {
                set choice 1
                set dev [get_ssh_entry $command $choice]
                
                connect_ssh $dev $arguments

                set status 0
                complete $command $status

                exit 0
            }

            {(^remove$)} {
                set choice 1
                set dev [get_ssh_entry $command $choice]
                set silent 0
                set opt ""

                if { $argc == 3 } {
                    set tmp [lindex $argv 2]
                    if { $tmp == "--purge" } {
                        set opt [lindex $argv 2]
                    } 
                }
                
                remove_ssh_dev $dev $silent $opt

                exit 0
            }

            {(^modify$)} {
                set choice 1
                set dev [get_ssh_entry $command $choice]
                set silent 1
                
                mod_ssh_dev $dev

                exit 0
            }

            {(^add$)} {
                set sign "ssh $command process for"
                signature $sign
                ssh_add

                set status 0
                complete $command $status

                exit 0
            }

            default {
                # dummy
                puts "?"
                exit -1
            }
        }
        exit 0
    }

    default {
        # dummy
        puts "?"
        exit -1
    } 

}
# CORE impl END


